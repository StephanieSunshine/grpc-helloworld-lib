// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_helloworld_lib

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloWorldClient is the client API for HelloWorld service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloWorldClient interface {
	Hello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	StreamFrom(ctx context.Context, in *Request, opts ...grpc.CallOption) (HelloWorld_StreamFromClient, error)
	StreamTo(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_StreamToClient, error)
	StreamBoth(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_StreamBothClient, error)
}

type helloWorldClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloWorldClient(cc grpc.ClientConnInterface) HelloWorldClient {
	return &helloWorldClient{cc}
}

func (c *helloWorldClient) Hello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/helloworld.HelloWorld/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloWorldClient) StreamFrom(ctx context.Context, in *Request, opts ...grpc.CallOption) (HelloWorld_StreamFromClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloWorld_ServiceDesc.Streams[0], "/helloworld.HelloWorld/StreamFrom", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldStreamFromClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloWorld_StreamFromClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type helloWorldStreamFromClient struct {
	grpc.ClientStream
}

func (x *helloWorldStreamFromClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloWorldClient) StreamTo(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_StreamToClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloWorld_ServiceDesc.Streams[1], "/helloworld.HelloWorld/StreamTo", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldStreamToClient{stream}
	return x, nil
}

type HelloWorld_StreamToClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type helloWorldStreamToClient struct {
	grpc.ClientStream
}

func (x *helloWorldStreamToClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloWorldStreamToClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloWorldClient) StreamBoth(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_StreamBothClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloWorld_ServiceDesc.Streams[2], "/helloworld.HelloWorld/StreamBoth", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldStreamBothClient{stream}
	return x, nil
}

type HelloWorld_StreamBothClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type helloWorldStreamBothClient struct {
	grpc.ClientStream
}

func (x *helloWorldStreamBothClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloWorldStreamBothClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloWorldServer is the server API for HelloWorld service.
// All implementations must embed UnimplementedHelloWorldServer
// for forward compatibility
type HelloWorldServer interface {
	Hello(context.Context, *Request) (*Response, error)
	StreamFrom(*Request, HelloWorld_StreamFromServer) error
	StreamTo(HelloWorld_StreamToServer) error
	StreamBoth(HelloWorld_StreamBothServer) error
	mustEmbedUnimplementedHelloWorldServer()
}

// UnimplementedHelloWorldServer must be embedded to have forward compatible implementations.
type UnimplementedHelloWorldServer struct {
}

func (UnimplementedHelloWorldServer) Hello(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedHelloWorldServer) StreamFrom(*Request, HelloWorld_StreamFromServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamFrom not implemented")
}
func (UnimplementedHelloWorldServer) StreamTo(HelloWorld_StreamToServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTo not implemented")
}
func (UnimplementedHelloWorldServer) StreamBoth(HelloWorld_StreamBothServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBoth not implemented")
}
func (UnimplementedHelloWorldServer) mustEmbedUnimplementedHelloWorldServer() {}

// UnsafeHelloWorldServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloWorldServer will
// result in compilation errors.
type UnsafeHelloWorldServer interface {
	mustEmbedUnimplementedHelloWorldServer()
}

func RegisterHelloWorldServer(s grpc.ServiceRegistrar, srv HelloWorldServer) {
	s.RegisterService(&HelloWorld_ServiceDesc, srv)
}

func _HelloWorld_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloWorldServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.HelloWorld/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloWorldServer).Hello(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloWorld_StreamFrom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloWorldServer).StreamFrom(m, &helloWorldStreamFromServer{stream})
}

type HelloWorld_StreamFromServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type helloWorldStreamFromServer struct {
	grpc.ServerStream
}

func (x *helloWorldStreamFromServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloWorld_StreamTo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloWorldServer).StreamTo(&helloWorldStreamToServer{stream})
}

type HelloWorld_StreamToServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type helloWorldStreamToServer struct {
	grpc.ServerStream
}

func (x *helloWorldStreamToServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloWorldStreamToServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloWorld_StreamBoth_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloWorldServer).StreamBoth(&helloWorldStreamBothServer{stream})
}

type HelloWorld_StreamBothServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type helloWorldStreamBothServer struct {
	grpc.ServerStream
}

func (x *helloWorldStreamBothServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloWorldStreamBothServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloWorld_ServiceDesc is the grpc.ServiceDesc for HelloWorld service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloWorld_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.HelloWorld",
	HandlerType: (*HelloWorldServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _HelloWorld_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFrom",
			Handler:       _HelloWorld_StreamFrom_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTo",
			Handler:       _HelloWorld_StreamTo_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamBoth",
			Handler:       _HelloWorld_StreamBoth_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hello.proto",
}
